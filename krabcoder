#!/usr/bin/env fish

####
# Fish Transcode Script
# This script will look for any video files in the current directory (or subdirectories) and transcode them
# using ffmpeg. 
#
# To Do:
#  * Pick a better name
#  * Convert to bash?
#  * Test with Apple and WSL
#  * Set up the ability to pass CLI arguments (target resolution)
#  * Set up the ability to pass specific filenames through the CLI instead of scanning all directories
#  * Smarter health check
#  * Ability to change to h264 encoder
#  * Change behavior so files being transcoded end in .tmp
#  * More move/delete options
#  * Support OS level recycle bins (gio trash instead of rm)
#  * Update checking
#  * Verify dependencies and suggested apps exist and are a good version
#  * save temporary files in a directory in /tmp instead of directly in /tmp
#  * incrementally save statistics in /tmp in order to benchmark the system and compute ETA estimates
#  * add option to preserve file creation/modification times
#  * Add option to scan file name for resolution and codec info and replace
#  * Set up fish command completion
#  * Alternative for find command that lets me more easily pass an array of file extensions to search for
#  * Set up a benchmark option. Pull a video file, transcode several ways, show results.

# Set some default variables
set SCRIPT_VERSION "1.0.0"
set SCRIPT_REPO "https://github.com/deftnerd/fish-transcode-script"
set FFMPEG_LOCATION "ffmpeg"
set FFPROBE_LOCATION "ffprobe"
set REMOVE_ORIGINAL "true"
set TARGET_CRF "25"
set TARGET_ENCODER "libx265"
set TARGET_CODEC "hevc"
set TARGET_PRESET "faster"
set TARGET_RESOLUTION "720"

function check_ffmpeg_cache --description 'Removes old cached ffmpeg results'
	if test -f /tmp/ffmpegversions.txt
        set -l testforold (find /tmp/ffmpegversions.txt -mmin +1440)
        if not test $status -eq 0
            rm -f /tmp/ffmpegversions.txt
            generate_cached_ffmpeg
        end
    else
        generate_cached_ffmpeg
    end
end

function retrieve_cached_ffmpeg --description 'Looks for recent cached ffmpeg results'
	check_ffmpeg_cache
	if test -f /tmp/ffmpegversions.txt
        set -l ffmpegchoice (head -1 /tmp/ffmpegversions.txt | cut -d" " -f2)
        set -l ffmpegversion (head -1 /tmp/ffmpegversions.txt | cut -d" " -f1)
        echo $ffmpegchoice
	end
end

function extract_ffmpeg_version --description 'Extracts the version number from a specified ffmpeg program'
    set -l extracted ($argv[1] -version | head -n 1 | cut -d" " -f3 | cut -d"-" -f1)
    echo $extracted
end

function generate_cached_ffmpeg --description 'Looks at all ffmpeg programs and caches their versions'
    for ffmpeg in (which -a ffmpeg)
        set -l ffmpegversion (extract_ffmpeg_version "$ffmpeg")
        echo "$ffmpegversion $ffmpeg" >> /tmp/ffmpegversions.tmp
    end
    sort -V --reverse "/tmp/ffmpegversions.tmp" > "/tmp/ffmpegversions.txt"
    rm -f "/tmp/ffmpegversions.tmp"
end

function check_ffprobe_cache --description 'Removes old cached ffprobe results'
	if test -f /tmp/ffprobeversions.txt
        set -l testforold (find /tmp/ffprobeversions.txt -mmin +1440)
        if not test $status -eq 0
            rm -f /tmp/ffprobeversions.txt
            generate_cached_ffprobe
        end
    else
        generate_cached_ffprobe
    end
end

function retrieve_cached_ffprobe --description 'Looks for recent cached ffprobe results'
	check_ffprobe_cache
	if test -f /tmp/ffprobeversions.txt
        set -l ffprobechoice (head -1 /tmp/ffprobeversions.txt | cut -d" " -f2)
        set -l ffprobeversion (head -1 /tmp/ffprobeversions.txt | cut -d" " -f1)
        echo $ffprobechoice
	end
end

function extract_ffprobe_version --description 'Extracts the version number from a specified ffprobe program'
    set -l extracted ($argv[1] -version | head -n 1 | cut -d" " -f3 | cut -d"-" -f1)
    echo $extracted
end

function generate_cached_ffprobe --description 'Looks at all ffprobe programs and caches their versions'
    for ffprobe in (which -a ffprobe)
        set -l ffprobeversion (extract_ffprobe_version "$ffprobe")
        echo "$ffprobeversion $ffprobe" >> /tmp/ffprobeversions.tmp
    end
    sort -V --reverse "/tmp/ffprobeversions.tmp" > "/tmp/ffprobeversions.txt"
    rm -f "/tmp/ffprobeversions.tmp"
end

function get_video_list --description 'Gets a list of all videos in the current directory and subdirectories'
	find . -type f \( -name \*.mkv \) -or \( -name \*.mp4 \) -or \( -name \*.avi \) | grep -v -F "_transcoded" | sort
end

function get_file_basename --description 'Gets the file name without the file extension'
	echo "$argv[1]" | sed 's/\.[^.]*$//'
end

function video_info
	set -l FILENAME $argv[1]

	set -l FFPROBE $FFPROBE_LOCATION
	set -a FFPROBE "-hide_banner"
	set -a FFPROBE "-loglevel fatal"
	set -a FFPROBE "-show_error"
	set -a FFPROBE "-show_streams"
	set -a FFPROBE "-show_format"
	set -a FFPROBE "-print_format json"
	set -a FFPROBE "\"$FILENAME\""

	eval $FFPROBE
end

function transcode
	set -l OLDNAME $argv[1]
	set -l NEWNAME $argv[2]
	set -l RESIZE  $argv[3]

	set -l FFMPEG $FFMPEG_LOCATION
	set -a FFMPEG "-hide_banner"
	set -a FFMPEG "-loglevel error"
	set -a FFMPEG "-stats"
	set -a FFMPEG "-y"
	set -a FFMPEG "-i"
	set -a FFMPEG "\"$OLDNAME\""
	set -a FFMPEG "-metadata ARCHIVAL=yes"
	if test $RESIZE = "true"
	set -a FFMPEG "-vf scale=-2:$TARGET_RESOLUTION"
	end
	set -a FFMPEG "-c:v $TARGET_ENCODER"
	set -a FFMPEG "-x265-params log-level=error"
	set -a FFMPEG "-crf $TARGET_CRF"
	set -a FFMPEG "-tag:v hvc1"
	set -a FFMPEG "-preset $TARGET_PRESET"
	set -a FFMPEG "-c:a copy"
	set -a FFMPEG "-c:s srt"
	set -a FFMPEG "\"$NEWNAME\""

	eval $FFMPEG
end

function main
	# Find the best ffmpeg installed on the system to use
    set FFMPEG_LOCATION (retrieve_cached_ffmpeg)
    set FFPROBE_LOCATION (retrieve_cached_ffprobe)

	set videolist (get_video_list)
	set videocount (count $videolist)
	set currentcount 1

	# General program details line
	set_color normal; printf "Found "
	set_color green; printf "%d" $videocount
	set_color normal; printf " videos to consider converting to "
	set_color green; printf "%dp" $TARGET_RESOLUTION
	set_color normal; printf " with "
	set_color green; printf "%s" $TARGET_ENCODER
	set_color normal; printf " (CRF "
	set_color green; printf "%d" $TARGET_CRF
	set_color normal; printf ", "
	set_color green; printf "%s" $TARGET_PRESET
	set_color normal; printf " preset)\n"

	for video in $videolist
		set oldname $video
		set_color white
		for i in (seq 1 (math $COLUMNS - 2))
			printf "="
		end
		printf "\n"

		# Make sure the file is still there
		if test -f $video
			set newname (get_file_basename $oldname)_transcoded.mkv
			set origin_video_info (video_info $oldname)
			set origin_duration_raw (echo $origin_video_info | jq -r '.format.duration')
			set origin_duration (math -s1 $origin_duration_raw / 60)
			set origin_width (echo $origin_video_info | jq -r '.streams[] | select(.codec_type == "video") | select(.codec_name != "mjpeg") | .width')
			set origin_height (echo $origin_video_info | jq -r '.streams[] | select(.codec_type == "video") | select(.codec_name != "mjpeg") | .height')
			set origin_codec (echo $origin_video_info | jq -r '.streams[] | select(.codec_type == "video") | select(.codec_name != "mjpeg") | .codec_name')
			set origin_already_processed (echo $origin_video_info | jq -r '.format.tags.ARCHIVAL')
			set best_resolution $TARGET_RESOLUTION
			set encode_failure "false"

			# If the original file has NOT already been processed
			if not test $origin_already_processed = "yes"
				# If the resolution is OK
				if test $origin_height -le $TARGET_RESOLUTION
					set best_resolution $origin_height
					set resize_video "false"
					set encode_video "true"
				end
				# If the resolution needs adjusting
				if test $origin_height -gt $TARGET_RESOLUTION
					set best_resolution $TARGET_RESOLUTION
					set resize_video "true"
					set encode_video "true"
				end
			end

			# If the original file has already been processed
			if test $origin_already_processed = "yes"
				# If the resolution is OK
				if test $origin_height -le $TARGET_RESOLUTION
					set best_resolution $origin_height
					set resize_video "false"
					set encode_video "false"
				end
				# If the resolution needs adjusting
				if test $origin_height -gt $TARGET_RESOLUTION
					set best_resolution $TARGET_RESOLUTION
					set resize_video "true"
					set encode_video "true"
				end
			end

		# Details line that shows current video count, file name, and video duration length
			set_color green;    printf '%4d' $currentcount
			set_color normal;   printf " of "
			set_color green;    printf "%4d" $videocount
			set_color normal;   printf " : "
			set_color -u white; printf "%s" $oldname | cut -c 1-(math $COLUMNS - 16)

		# Details line that shows the source video length. 
			set_color normal;
			set_color brblack; printf "    Duration"
			set_color normal;  printf " : "
			set_color green;   printf '%9.2f' $origin_duration
			set_color normal;  printf " minutes\n"

		# Details line that shows the source video length. 
			set_color brblack; printf "  Resolution"
			set_color normal;  printf " : "
			set_color green;   printf "%8dp" $origin_height
			set_color normal;  printf " -> "
			set_color green;   printf "%dp\n" $best_resolution

		# Details line that shows the source video length. 
			set_color brblack; printf "       Codec"
			set_color normal;  printf " : "
			set_color green;   printf "%9s" $origin_codec
			set_color normal;  printf " -> "
			set_color green;   printf "%s\n" $TARGET_CODEC

		# Start transcoding
			if test $encode_video = "true"
				set_color brblack
				# Start the timer
				set START_TS (date +%s)
				# Send the info to the transcoder function
					transcode "$oldname" "$newname" "$resize_video"
					if test ! $status -eq 0
						set encode_failure "true"
					end
				# End the timer
				set END_TS (date +%s)
				# Delete the progress info line left over from ffmpeg
				printf '\e[A\e[K'
			end

		# Generate post-processing data
			if test $encode_video = "true" 
				and test $encode_failure = "false"
				# Transcoder runtime
				set RUNTIME_RAW (math $END_TS - $START_TS)
				set RUNTIME (math -s1 $RUNTIME_RAW / 60)
				# Size changes
				set oldsize (ls -l $oldname | awk '{print  $5}')
				set newsize (ls -l $newname | awk '{print  $5}')
				set sizedifference (math -s0 \($oldsize - $newsize\) \/ 1048576)
				set percentsaved (math -s0 \(100 - \(\(100 \/ $oldsize\) \* $newsize\)\))
				# Transcoded file validation
				set -l new_video_info (video_info $newname)
				set -l new_duration_raw (echo $new_video_info | jq -r '.format.duration')
				set new_duration (math -s1 $new_duration_raw / 60)
				set new_width (echo $new_video_info | jq -r '.streams[] | select(.codec_type == "video") | select(.codec_name != "mjpeg") | .width')
				set new_height (echo $new_video_info | jq -r '.streams[] | select(.codec_type == "video") | select(.codec_name != "mjpeg") | .height')
				set new_codec (echo $new_video_info | jq -r '.streams[] | select(.codec_type == "video") | select(.codec_name != "mjpeg") | .codec_name')
			end

		# Healthcheck
			if test $encode_video = "true" 
				and test $encode_failure = "false"
				if test $origin_duration -eq $new_duration 
					set new_video_healthy "true"
				else
					set new_video_healthy "false"
				end
			end

		# Post-Processing
			if test $encode_failure = "true"
				rm -f "$newname"
				set_color red;     printf "      Result"
				set_color normal;  printf " : "
				set_color red;     printf "Error encountered. Original file was kept."
				set_color normal;  printf "\n"
			else
				if test $encode_video = "true" 
					if test $new_video_healthy = "true"
						if test $REMOVE_ORIGINAL = "true"
							rm -f "$oldname"
							mv -f "$newname" (get_file_basename $oldname).mkv
						end
						set_color brblack; printf "      Result"
						set_color normal;  printf " : "
						set_color green;   printf "%9s" $RUNTIME
						set_color normal;  printf " minutes spent for a "
						set_color green;   printf "%'d" $sizedifference
						set_color normal;  printf " MB reduction ("
						set_color green;   printf "%d%%" $percentsaved
						set_color normal;  printf " savings)\n"
					end
				else
					set_color cyan;    printf "      Result"
					set_color normal;  printf " : "
					set_color cyan;    printf "Video previously processed and transcoding was unnecessary."
					set_color normal;  printf "\n"
				end
			end
		else
		# Details line that shows current video count and file name
			set_color green;    printf '%4d' $currentcount
			set_color normal;   printf " of "
			set_color green;    printf "%d" $videocount
			set_color normal;   printf " : "
			set_color -u white; printf "%s" $oldname
			set_color normal;   printf "\n"

			set_color red;     printf "    Result"
			set_color normal;  printf " : "
			set_color red;     printf "Skipping because the file no longer exists."
			set_color normal;  printf "\n"
		end

		# Increment counter
		set currentcount (math $currentcount + 1)

	end
end

## Start script
main
